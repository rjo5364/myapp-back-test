name: Run Tests and Deploy to Render

on:
  push:
    branches:
      - master 

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      LINKEDIN_CLIENT_ID: ${{ secrets.LINKEDIN_CLIENT_ID }}
      LINKEDIN_CLIENT_SECRET: ${{ secrets.LINKEDIN_CLIENT_SECRET }}
      LINKEDIN_REDIRECT_URI: ${{ secrets.LINKEDIN_REDIRECT_URI }}
      BASE_URL: ${{ secrets.BASE_URL }}
      FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
      KEY_GITHUB_CLIENT_ID: ${{ secrets.KEY_GITHUB_CLIENT_ID }}
      KEY_GITHUB_CLIENT_SECRET: ${{ secrets.KEY_GITHUB_CLIENT_SECRET }}
      REACT_APP_BACKEND_URL: ${{ secrets.REACT_APP_BACKEND_URL }}
      PROJECT_ID: ${{ secrets.PROJECT_ID }}
      TASK_ID: ${{ secrets.TASK_ID }}
      USER_ID: ${{ secrets.USER_ID }}
      MOCK_NAME: ${{ secrets.MOCK_NAME }}
      MOCK_EMAIL: ${{ secrets.MOCK_EMAIL }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3 

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm install

      - name: Run Tests and Capture Results
        id: test_results
        run: |
          # Run Jest tests and capture output in a file
          npx jest --json --outputFile=test-results.json || true
          
          # Extract test summary
          TOTAL_TESTS=$(jq '.numTotalTests' test-results.json)
          PASSED_TESTS=$(jq '.numPassedTests' test-results.json)
          FAILED_TESTS=$(jq '.numFailedTests' test-results.json)

          # Calculate pass percentage
          PASS_PERCENTAGE=$((100 * PASSED_TESTS / TOTAL_TESTS))

          echo "Total Tests: $TOTAL_TESTS"
          echo "Passed Tests: $PASSED_TESTS"
          echo "Failed Tests: $FAILED_TESTS"
          echo "Pass Percentage: $PASS_PERCENTAGE%"

          # Store pass percentage for next step
          echo "PASS_PERCENTAGE=$PASS_PERCENTAGE" >> $GITHUB_ENV

      - name: Check Test Threshold
        id: check_threshold
        run: |
          MINIMUM_PASS_PERCENT=80  # Set your threshold (e.g., 80%)
          
          if [ "$PASS_PERCENTAGE" -ge "$MINIMUM_PASS_PERCENT" ]; then
            echo "Tests passed threshold, proceeding with deployment."
            echo "DEPLOY_ALLOWED=true" >> $GITHUB_ENV
          else
            echo "Tests failed threshold, skipping deployment."
            echo "DEPLOY_ALLOWED=false" >> $GITHUB_ENV
          fi

  deploy:
    needs: test
    if: env.DEPLOY_ALLOWED == 'true'  # Only deploy if the test threshold is met
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Deploy on Render
        run: |
          curl -X POST -d '{}' \
          -H "Authorization: Bearer ${{ secrets.RENDER_DEPLOY_HOOK }}" \
          "https://api.render.com/deploy/srv-cufulodsvqrc73fu3pog"